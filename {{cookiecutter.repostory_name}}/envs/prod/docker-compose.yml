version: '3.7'

services:
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    healthcheck:
      test: redis-cli ping
    restart: unless-stopped
    volumes:
      - ./redis/data:/data
    logging: &logging
      driver: journald
      options:
        tag: {% raw %}'{{.Name}}'{% endraw %}

  db:
    image: postgres:14.0-alpine
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} || exit 1
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db/data:/var/lib/postgresql/data
    logging:
      <<: *logging

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: {{cookiecutter.django_project_name}}/app
    healthcheck:
      test: wget -q --spider 127.0.0.1:8000/admin/login/ || exit 1
    init: true
    restart: unless-stopped
    env_file: ./.env
    {% if cookiecutter.monitoring == 'y' %}
    environment:  # add this setting to any container that should dump prometheus metrics
      - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir
    {% endif %}
    volumes:
      - backend-static:/root/src/static
      - ./media:/root/src/media
      {% if cookiecutter.monitoring == 'y' %}
      # If another container is using prometheus metrics, it should dump it's metrics to a subdirectory of the host dir,
      # e.g `- ./prometheus-multiproc-dir/other_container:/prometheus-multiproc-dir` - all containers should use
      # separate subdirs
      - ./prometheus-multiproc-dir:/prometheus-multiproc-dir
      {% endif %}
    links:
      - redis:redis
    depends_on:
      - redis
      - db
    logging:
      <<: *logging

  {% if cookiecutter.use_celery == "y" -%}
  celery-worker:
    image: {{cookiecutter.django_project_name}}/app
    init: true
    healthcheck:
      test: celery -A {{cookiecutter.django_project_name}} status --quiet || exit 1
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
    command: ./celery-entrypoint.sh
    tmpfs: /run
    links:
      - redis:redis
    depends_on:
      - redis
    logging:
      <<: *logging

  celery-beat:
    image: {{cookiecutter.django_project_name}}/app
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
    command: nice celery -A {{cookiecutter.django_project_name}} beat -l INFO --schedule /tmp/celerybeat-schedule -f /tmp/logs/celery-beat.log
    volumes:
      - ./logs:/tmp/logs
    links:
      - redis:redis
    depends_on:
      - redis
    logging:
      <<: *logging

  {% if cookiecutter.use_flower == "y" -%}
  celery-flower:
    image: {{cookiecutter.django_project_name}}/app
    healthcheck:
      test: wget --user "${CELERY_FLOWER_USER}" --password "${CELERY_FLOWER_PASSWORD}" -qO- 127.0.0.1:5555 > /dev/null || exit 1
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
    command: celery --app={{cookiecutter.django_project_name}} --broker="${CELERY_BROKER_URL}" flower --basic_auth="${CELERY_FLOWER_USER}:${CELERY_FLOWER_PASSWORD}"
    depends_on:
      - celery-worker
    ports:
      - 5555:5555
    logging:
      <<: *logging
  {% endif %}
  {% endif -%}

  nginx:
    image: 'ghcr.io/reef-technologies/nginx-rt:v1.0.0'
    restart: unless-stopped
    healthcheck:
      test: wget -q --spider 0.0.0.0:80 || exit 1
    environment:
      - NGINX_HOST=${NGINX_HOST}
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/config_helpers:/etc/nginx/config_helpers
      - backend-static:/srv/static:ro
      - ./media:/srv/media:ro
      - ./letsencrypt/etc:/etc/letsencrypt
      - ./nginx/monitoring_certs:/etc/monitoring_certs
    links:
      - app:app
      {% if cookiecutter.monitoring == 'y' %}
      - cadvisor:cadvisor
      - node-exporter:node-exporter
      {% endif %}
    command: nginx -g 'daemon off;'
    ports:
      - 80:80
      - 443:443
      {% if cookiecutter.monitoring == 'y' %}
      - 10443:10443
      {% endif %}
    logging:
      <<: *logging

  {% if cookiecutter.monitoring == 'y' %}
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|run|boot|var/.+)($$|/)'
      {% if cookiecutter.monitor_tcpstat == 'y' %}
      - '--collector.tcpstat'
      {% endif %}
    logging:
      <<: *logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.40.0
    container_name: cadvisor
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    logging:
      <<: *logging

  {% endif %}

volumes:
  backend-static:
